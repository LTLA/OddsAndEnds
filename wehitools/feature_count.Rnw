\documentclass{article}
\usepackage[margin=2cm]{geometry}
\usepackage{Sweave}
\usepackage{float}
\usepackage{listings}
\SweaveOpts{keep.source=TRUE}
\DefineVerbatimEnvironment{Sinput}{Verbatim}{fontshape=sl,fontsize=\scriptsize}
\DefineVerbatimEnvironment{Soutput}{Verbatim}{fontsize=\scriptsize}
\DefineVerbatimEnvironment{Scode}{Verbatim}{fontsize=\scriptsize}

<<echo=FALSE,results=tex>>=
# Checking if we need to print a title.
if (!is.character(title)) { title <- "Counting exonic reads with \\texttt{featureCounts}" }
cat(paste0("\\title{", title, "}"))
@

\author{Aaron Lun}

\begin{document}

<<echo=FALSE,results=hide>>=
# Checking inputs
if (! exists('allBam')) {
    stop("Need a vector containing names of BAM files.");
}
if (!exists('genome')) {
    stop("Need to specify genome ('hg19' or 'mm10')")
} else if (genome=="mm9") { stop("say what?") }
if (!exists('pet')){
    stop("Need a boolean specifying if data is PET or not ('pet').");
}
if (!exists("exonic")) {
	exonic <- FALSE
}
if (!exists("technical")) { 
	technical <- NULL
}
if (!exists("stranded")) { 
	stranded <- 0
}
@

\maketitle
 
\section{Introduction}
We first need to specify the BAM files we are working from and the genomic annotation which is to be used. The idea is to call the 
\texttt{featureCounts} function in the \texttt{Rsubread} package to count the number of reads for each gene in each library. Using 
the same package for alignment and read counting avoids problems with synchronisation between the genome index and annotation.

<<>>=
require(Rsubread)
print(allBam)
print(genome)
@

RNA-PET data poses some additional challenges due to  correlations between paired reads. 
<<results=tex,echo=FALSE,strip.white=false>>=
if (pet){ 
	cat("Each pair should only be counted once as it represents a single sequenced cDNA fragment. 
Counting them twice as separate reads overstates the evidence, reduces the effectiveness of filtering and messes with the mean-variance relationship of the NB model by reducing the relative contribution of the Poisson term.")
} else {
	cat("Fortunately, this isn't a problem here as we're dealing with single-end data.")
}
cat("\n")
@

<<>>=
pet
@

We also specify the minimum mapping quality which is allowable for a read (pair) to be counted.
Low MAPQ scores are indicative of reads which are poorly mapped or not uniquely mapped. 
Their removal improves the reliability of the alignments, and subsequently increases the reliability of the final results.
This threshold is set at 10 which assumes that 10\% of reads are incorrectly mapped due to ambiguity or other reasons. 

<<>>=
minq <- 10
@

Finally, we need to determine whether we are dealing with strand-specific data.
In such cases, only reads that map to the same strand of the gene should be counted for that gene.
This is useful for correctly assigning reads to overlapping genes, e.g., like those involving non-coding RNAs.

<<>>=
stranded
@

\section{Read counting into genes}
The number of reads (or read pairs) mapped to each exon is counted for each gene in the current genome. 
<<echo=FALSE,results=tex,strip.white=false>>=
if (exonic) { 
	cat("For exon-level results, different counts for splice variants are not calculated due to the difficulties of isoform deconvolution.\n")
} else {
	cat("For gene-level results, exon-level counts are summed together for each gene obtain a single count for that gene.\n")
}
@

<<echo=FALSE,results=tex,strip.white=false>>=
cmds <- c('output <- featureCounts(allBam, annot.inbuilt=genome, isPairedEnd=pet,',
		  sprintf('	   minMQS=minq, useMetaFeatures=%s, strandSpecific=stranded)', as.character(!exonic)),
'colnames(output$counts) <- sub("\\\\.bam$", "", basename(allBam))')
if (exonic) {
# Pulling out exon IDs.
	cmds <- c(cmds, 
		'by.gene <- rle(output$annotation$GeneID)',
		'stopifnot(all(!duplicated(by.gene$value)))', #Some checks for co-location of exons by gene ID.
		'gene.ends <- cumsum(by.gene$lengths)',
		'by.exon <- list()',
		'for (g in 1:length(gene.ends)) {',
		'    current <- output$annotation[gene.ends[g]-by.gene$lengths[g]:1+1,]',
		'    if (all(current$Strand=="+")) { by.exon[[g]] <- order(current$Start) }',
		'    else if (all(current$Strand=="-")) { by.exon[[g]] <- order(current$End, decreasing=TRUE) }',
		'    else { stop("annotation has multiple strands for a single gene") }',
		'}',
		'rownames(output$counts) <- paste0(rownames(output$counts), ":", unlist(by.exon))')
} 

cat("\\begin{Schunk}\n\\begin{Sinput}\n")
cat(paste(ifelse(grepl("^\\s", cmds), "+", ">"), cmds), '> head(output$counts)', sep="\n")
cat("\\end{Sinput}\n\\end{Schunk}")
@
<<results=hide,echo=FALSE>>=
eval(parse(text=cmds))
@
<<echo=FALSE>>=
head(output$counts)
@

We can have a look at some read assignment diagnostics.
The proportion of reads mapped to genic regions is also calculated for all files. 
This can be taken as a measure of data quality as transcriptome sequencing should mostly yield reads within annotated genic regions. 
A low proportion of gene-mapped reads may be indicative of genomic contamination. 

<<>>=
colnames(output$stat)[-1] <- basename(allBam)
output$stat
output$stat[1,-1]/colSums(output$stat[,-1])
@

<<echo=FALSE,results=tex,strip.white=false>>=
if (pet) {
	cat("
For PET data, we perform additional quality control using the \\texttt{getPESizes} function in the \\textsf{csaw} package.
This will examine the distribution of fragment sizes as well as other aspects of counting, e.g., inter-chromosomal read pairs, unmapped read pairs.
Obviously, fragment sizes may be inflated by the inclusion of the intron length for read pairs spanning exon boundaries.
\n")
   	cmds <- c("require(csaw)",
	    	"sizes <- diags <- list()",
      	 	"for (bam in allBam) {",
	   		"    current <- getPESizes(bam, param=readParam(pe='both', minq=minq))", 
	   		"    sizes[[basename(bam)]] <- summary(current$sizes)",
	   		"    diags[[basename(bam)]] <- current$diagnostics",
	   		"}")
	
	cat("\\begin{Schunk}\n\\begin{Sinput}\n")
	cat(paste(ifelse(grepl("^\\s", cmds), "+", ">"), cmds), sep="\n")
	cat("\\end{Sinput}\n\\end{Schunk}")
   	eval(parse(text=cmds))
}
@

<<echo=FALSE,results=tex,strip.white=false>>=
if (pet){ 
	cat("
Users should be aware that the PET diagnostics here won't necessarily correspond exactly to the reads that are uncounted in \texttt{featureCounts}.
In fact, \texttt{featureCounts} is very permissive when it comes to counting read pairs that are rather silly (e.g., interchromosomals are allowed).
The truest way to obtain diagnostics would be to run \texttt{featureCounts} with more stringent settings, but this tends to be quite laborious.
")
	for (x in c("sizes", "diags")) { 
		cat(c(	"\\begin{Schunk}\n\\begin{Sinput}",
			 	sprintf("> do.call(rbind, %s)", x),
				"\\end{Sinput}",
				"\\begin{Soutput}"), sep="\n")
		print(do.call(rbind, get(x)))
		cat("\\end{Soutput}\n\\end{Schunk}\n")
	}
}
@

<<echo=FALSE,results=tex,strip.white=false>>=
if (!is.null(technical)) {
	cat("\\section{Merging technical replicates}
Any technical replicates are merged together by adding the counts for each gene.
This is based on the assumption that sequencing is a Poisson process.
Thus, addition of counts will obtain the equivalent count from a (hypothetical) single run at a depth equal to the sum of the individual runs.
")
	cat(c("\\begin{Schunk}\n\\begin{Sinput}",
	 	"> technical",
		"\\end{Sinput}",
		"\\begin{Soutput}"), sep="\n")
	print(technical)
	cat("\\end{Soutput}\n\\end{Schunk}\n")

	cmds <- c("by.tech <- split(1:ncol(output$counts), technical)",
			  "new.mat <- matrix(0L, nrow(output$counts), length(by.tech))",
			  "for (x in 1:length(by.tech)) { new.mat[,x] <- rowSums(output$counts[,by.tech[[x]],drop=FALSE]) }",
			  "colnames(new.mat) <- names(by.tech)",
			  "rownames(new.mat) <- rownames(output$counts)")
	cat(c("\\begin{Schunk}\n\\begin{Sinput}",
		paste(ifelse(grepl("^\\s", cmds), "+", ">"), cmds), "> head(new.mat)", 
		"\\end{Sinput}",
		"\\begin{Soutput}"), sep="\n")
	eval(parse(text=cmds))
	print(head(new.mat))
	cat("\\end{Soutput}\n\\end{Schunk}\n")
}
@

Finally, a copy of the count table is saved for downstream use in the differential expression analysis.

<<results=tex,echo=FALSE,strip.white=false>>=
cmds <- sprintf('write.table(%s, file="%sic_counts.tsv", sep="\\t", quote=FALSE, row.names=TRUE, col.names=NA)', 
	ifelse(is.null(technical), "output$counts", "new.mat"), 
	ifelse(exonic, "exon", "gen"))
cat(c("\\begin{Schunk}\n\\begin{Sinput}",
	paste(">", cmds), 
	"\\end{Sinput}\n\\end{Schunk}"), sep="\n")
eval(parse(text=cmds))
@

\section{Session Information}

<<>>=
options(width=100)
sessionInfo()
@

\end{document}
